"""
389. Find the Difference
Easy

1867

346

Add to List

Share
You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.



Example 1:

Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
Example 2:

Input: s = "", t = "y"
Output: "y"


Constraints:

0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lowercase English letters.
"""
import unittest


class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        s_chars = {}

        if len(t) == 1:
            return t[0]
        for s_char in s:
            if s_char in s_chars.keys():
                s_chars[s_char] += 1
            else:
                s_chars[s_char] = 1
        for t_char in t:
            if t_char in s_chars.keys():
                if s_chars[t_char] == 0:
                    return t_char
                s_chars[t_char] -= 1
            else:
                return t_char

    def findTheDifference_approach2(self,s: str, t: str)-> str:
        code = 0
        for ch in s + t:
            code ^= ord(ch)
        return chr(code)

class TestSolution(unittest.TestCase):
    def setUp(self) -> None:
        self.obj = Solution()

    def test_case1_approach1(self):
        self.assertEqual(self.obj.findTheDifference("abcd","abcde"),"e")

    def test_case2_approach1(self):
        self.assertEqual(self.obj.findTheDifference("","y"),"y")

    def test_case3_approach1(self):
        self.assertEqual(self.obj.findTheDifference("a","aa"),"a")

    def test_case1_approach2(self):
        self.assertEqual(self.obj.findTheDifference_approach2("abcd","abcde"),"e")

    def test_case2_approach2(self):
        self.assertEqual(self.obj.findTheDifference_approach2("","y"),"y")

    def test_case3_approach2(self):
        self.assertEqual(self.obj.findTheDifference_approach2("a","aa"),"a")


